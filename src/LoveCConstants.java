/* Generated By:JJTree&JavaCC: Do not edit this line. LoveCConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface LoveCConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 7;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 8;
  /** RegularExpression Id. */
  int HEX_LITERAL = 9;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 10;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 11;
  /** RegularExpression Id. */
  int EXPONENT = 12;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 13;
  /** RegularExpression Id. */
  int STRING_LITERAL = 14;
  /** RegularExpression Id. */
  int STATIC = 15;
  /** RegularExpression Id. */
  int VOID = 16;
  /** RegularExpression Id. */
  int CHAR = 17;
  /** RegularExpression Id. */
  int SHORT = 18;
  /** RegularExpression Id. */
  int INT = 19;
  /** RegularExpression Id. */
  int LONG = 20;
  /** RegularExpression Id. */
  int FLOAT = 21;
  /** RegularExpression Id. */
  int DOUBLE = 22;
  /** RegularExpression Id. */
  int SIGNED = 23;
  /** RegularExpression Id. */
  int UNSIGNED = 24;
  /** RegularExpression Id. */
  int CONST = 25;
  /** RegularExpression Id. */
  int CASE = 26;
  /** RegularExpression Id. */
  int DFLT = 27;
  /** RegularExpression Id. */
  int IF = 28;
  /** RegularExpression Id. */
  int ELSE = 29;
  /** RegularExpression Id. */
  int SWITCH = 30;
  /** RegularExpression Id. */
  int WHILE = 31;
  /** RegularExpression Id. */
  int FOR = 32;
  /** RegularExpression Id. */
  int DO = 33;
  /** RegularExpression Id. */
  int GOTO = 34;
  /** RegularExpression Id. */
  int CONTINUE = 35;
  /** RegularExpression Id. */
  int BREAK = 36;
  /** RegularExpression Id. */
  int RETURN = 37;
  /** RegularExpression Id. */
  int IDENTIFIER = 38;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "\"static\"",
    "\"void\"",
    "\"char\"",
    "\"short\"",
    "\"int\"",
    "\"long\"",
    "\"float\"",
    "\"double\"",
    "\"signed\"",
    "\"unsigned\"",
    "\"const\"",
    "\"case\"",
    "\"default\"",
    "\"if\"",
    "\"else\"",
    "\"switch\"",
    "\"while\"",
    "\"for\"",
    "\"do\"",
    "\"goto\"",
    "\"continue\"",
    "\"break\"",
    "\"return\"",
    "<IDENTIFIER>",
    "\"(\"",
    "\"=\"",
    "\",\"",
    "\";\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"*\"",
    "\":\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"+=\"",
    "\"-=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"&=\"",
    "\"^=\"",
    "\"|=\"",
    "\"++\"",
    "\"--\"",
    "\"-\"",
    "\"&\"",
    "\"~\"",
    "\"!\"",
    "\"||\"",
    "\"&&\"",
    "\"|\"",
    "\"^\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"<<\"",
    "\">>\"",
    "\"+\"",
    "\"/\"",
    "\"%\"",
  };

}
