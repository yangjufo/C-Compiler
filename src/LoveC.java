/* Generated By:JJTree&JavaCC: Do not edit this line. LoveC.java */
import java.util.*;
import java.io.*;

public class LoveC extends Exception/*@bgen(jjtree)*/implements LoveCTreeConstants, LoveCConstants {/*@bgen(jjtree)*/
  protected static JJTLoveCState jjtree = new JJTLoveCState();private static String switch_expr;
    private static int label = 0;
    private static int label_stack[] = new int[100];
    private static int label_pos = 0;

                private static FunctionType definingFunc;
    private static Symtab symTab;
    private static ErrorHandler errorHandler;
    private static int loc;
    private static int checkRes;
    private static String arr[] = new String[500];
    private static int top = 0;
    private static int i = 0;
    public static PrintWriter pr_ir, pr_sym;

    private static void assign() {
      pr_ir.write("\u005ctt" + i + "=" + arr[top - 3] + arr[top - 2] + arr[top - 1] + "\u005cn");
      top -= 3;
      arr[top++] = "t" + i;
      i++;
    }

    private static void u_assign() {
      pr_ir.write("\u005ctt" + i + "=" + arr[top - 2] + arr[top - 1] + "\u005cn");
      top -= 2;
      arr[top++] = "t" + i;
      i++;
    }

    private static void mem() {
      arr[top - 1] = "MEM(" + arr[top - 1] + ")";
    }

    private static void address() {
      arr[top - 1] = "ADDRESS(" + arr[top - 1] + ")";
    }

    private static void assign_var(String tem) {
      pr_ir.write("\u005ct" + tem + "=" + arr[top - 1] + "\u005cn");
      top -= 1;
      arr[top++] = tem;
    }

    private static void var_assign() {
      String t = arr[top - 3];
      pr_ir.write("\u005ct" + arr[top - 3] + arr[top - 2] + arr[top - 1] + "\u005cn");
      top -= 3;
      arr[top++] = t;
    }

    public static void main(String args[]) throws ParseException, IOException, Exception {
      String name = "error_calculation";
      LoveC parser = new LoveC(new FileInputStream(name+ ".txt"));
      symTab.addSysFunc();
      pr_ir = new PrintWriter("output" + name + ".txt");
      pr_sym = new PrintWriter("symtab" + name + ".txt");
      {
        System.out.println("Reading from file ...");
        try {
          SimpleNode n = LoveC.Start();
            if (errorHandler.hasError())
               throw new ParseException();
            if (errorHandler.hasWarning())
                                                        errorHandler.printWarning();
          if (n != null) {
            n.dump(">>");
            System.out.println("OK!");
            pr_ir.close();
            pr_sym.close();
          } else System.out.println("Goodbye!");
          } catch (ParseException e) {
              System.out.println("C Parser:  Encountered errors during parse.");
              errorHandler.printError();
              if (errorHandler.hasWarning())
                errorHandler.printWarning();
          } catch (Exception e) {
              System.out.println("NOK.");
              System.out.println(e.getMessage());
              e.printStackTrace();
              LoveC.ReInit(System.in);
          } catch (Error e) {
              System.out.println("Oops.");
              System.out.println(e.getMessage());
          }
      }
    }

  static final public SimpleNode Start() throws ParseException, Exception {
                                     /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      top_unit();
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//Top unit
  static final public int top_unit() throws ParseException, Exception {
 /*@bgen(jjtree) top_unit */
  SimpleNode jjtn000 = new SimpleNode(JJTTOP_UNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        var_fun();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STATIC:
        case VOID:
        case CHAR:
        case INT:
        case FLOAT:
        case DOUBLE:
        case CONST:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(0);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      System.out.print("\u005ct\u005ct\u005ctAccepted \u005cn");
      symTab.display_func_tab();
      symTab.display_global_var_tab();
      {if (true) return 0;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      if (jjte000 instanceof Exception) {
        {if (true) throw (Exception)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

//Declarations
  static final public void var_fun() throws ParseException, Exception {
 /*@bgen(jjtree) var_fun */
    SimpleNode jjtn000 = new SimpleNode(JJTVAR_FUN);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      if (jj_2_1(2147483647)) {
        fun_def();
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        System.out.print("\u005ct\u005ct\u005ctFunction declaration \u005cn");
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STATIC:
        case VOID:
        case CHAR:
        case INT:
        case FLOAT:
        case DOUBLE:
          global_var_def();
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        System.out.println("\u005ct\u005ct\u005ctGlobal variable defination\u005cn");
          break;
        case CONST:
          const_def();
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        System.out.println("\u005ct\u005ct\u005ctConstant variable deifination\u005cn");
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      if (jjte000 instanceof Exception) {
        {if (true) throw (Exception)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// 全局变量定义
  static final public void global_var_def() throws ParseException, Exception {
 /*@bgen(jjtree) global_var_def */
    SimpleNode jjtn000 = new SimpleNode(JJTGLOBAL_VAR_DEF);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String type;
    String name;
    VariableType rhs = null, lhs;
    Token t = null;
    boolean isStatic;
    try {
      isStatic = storage();
      type = type_specifiers();
      name = name();
      jjtn000.setText((" name: " + name));
      int pos = symTab.is_globalVar_declare(name);
      if (pos != -1){
        errorHandler.error(loc, "Global variable " + name + " has been declared");
        {if (true) return;}
      }
      symTab.globalVarTab.add(new VariableType());
      lhs = symTab.lastVar(symTab.globalVarTab);
      lhs.type = type + "";
      lhs.isStatic = isStatic;
      lhs.name = name + "";
      lhs.isGlobal = true;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 40:
        jj_consume_token(40);
        rhs = expr();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
                                checkRes = symTab.checkAssignType(lhs.type, rhs.type);
                                if(checkRes == 1)
                                        errorHandler.warning(loc, "Loss will occur while assigning " + rhs.name + " to " + lhs.name);
                                else if(checkRes == 2)
                                        errorHandler.error(loc, "Cannot assign " + rhs.name + " to " + lhs.name);
                                else
                                        lhs.value = rhs.name + "";
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 41:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        jj_consume_token(41);
        name = name();
        pos = symTab.is_globalVar_declare(name);
        if (pos != -1){
          errorHandler.error(loc, "Global variable " + name + " has been declared");
          {if (true) return;}
        }
        symTab.globalVarTab.add(new VariableType());
        lhs = symTab.lastVar(symTab.globalVarTab);
        lhs.type = type + "";
        lhs.isStatic = isStatic;
        lhs.name = name + "";
        lhs.isGlobal = true;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 40:
          jj_consume_token(40);
          rhs = expr();
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
      checkRes = symTab.checkAssignType(lhs.type, rhs.type);
      if(checkRes == 1)
        errorHandler.warning(loc, "Loss will occur while assigning " + rhs.name + " to " + lhs.name);
      else if(checkRes == 2)
        errorHandler.error(loc, "Cannot assign " + rhs.name + " to " + lhs.name);
      else
        lhs.value = rhs.name + "";
      }
      jj_consume_token(42);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        System.out.println("\u005ct\u005ct\u005ctGlobal variable definition\u005cn");
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      if (jjte000 instanceof Exception) {
        {if (true) throw (Exception)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//常量定义
  static final public void const_def() throws ParseException, Exception {
 /*@bgen(jjtree) const_def */
  SimpleNode jjtn000 = new SimpleNode(JJTCONST_DEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  String name;
  String type;
  VariableType rhs, lhs;
    try {
      t = jj_consume_token(CONST);
      type = type_specifiers();
      name = name();
    jjtn000.setText((" type: "+ type));
    jjtn000.setText((" name: "+ name));
    int pos = symTab.is_globalVar_declare(name);
    if (pos != -1){
      errorHandler.error(loc, "Const variable " + name + " has been declared");
      {if (true) return;}
    }
    symTab.globalVarTab.add(new VariableType());
    lhs = symTab.lastVar(symTab.globalVarTab);
    lhs.type = type + "";
    lhs.name = name + "";
    lhs.isGlobal = true;
    lhs.isConst = true;
    pr_ir.write("\u005ct" + name + "=" + arr[--top]);
    System.out.println("\u005ct\u005ct\u005ctConstant variable definition\u005cn");
      jj_consume_token(40);
      rhs = expr();
    checkRes = symTab.checkAssignType(lhs.type, rhs.type);
    if(checkRes == 1)
      errorHandler.warning(loc, "Loss will occur while assigning " + rhs.name + " to " + lhs.name);
    else if(checkRes == 2)
      errorHandler.error(loc, "Cannot assign " + rhs.name + " to " + lhs.name);
                else
      lhs.value = rhs.name + "";
      jj_consume_token(42);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//函数定义
  static final public void fun_def() throws ParseException, Exception {
 /*@bgen(jjtree) fun_def */
                SimpleNode jjtn000 = new SimpleNode(JJTFUN_DEF);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);String type;
                String name;
    Token t = null;
    FunctionType function;
    boolean isStatic;
    try {
      isStatic = storage();
      type = type_specifiers();
      name = name();
        int pos = symTab.is_func_declare(name);
        if (pos != -1)
          errorHandler.error(loc, "Function " + name + " has been declared");
        else {
                symTab.funcTab.add(new FunctionType());
                function = symTab.lastFunc();
                function.isStatic = isStatic;
                function.returnType = type + "";
                function.returnValue = new VariableType();
                function.returnValue.name = "null";
                function.returnValue.type = null;
                function.name = name + "";
                definingFunc = function;
                pr_ir.write(name + ":\u005cn");
        }
      jj_consume_token(39);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
      case CHAR:
      case INT:
      case FLOAT:
      case DOUBLE:
        func_param_list();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(43);
      block();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      pr_ir.write("\u005ctrtn\u005cn\u005cn");
      System.out.print("\u005ct\u005ct\u005ctFunction definition\u005cn");
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      if (jjte000 instanceof Exception) {
        {if (true) throw (Exception)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//函数参数
  static final public void func_param_list() throws ParseException {
 /*@bgen(jjtree) func_param_list */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNC_PARAM_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      func_param_decl();
      label_3:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(41);
        func_param_decl();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    System.out.print("\u005ct\u005ct\u005ctFunction parameter list\u005cn");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//参数声明
  static final public void func_param_decl() throws ParseException {
 /*@bgen(jjtree) func_param_decl */
        SimpleNode jjtn000 = new SimpleNode(JJTFUNC_PARAM_DECL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String type;
        VariableType var = null;
    try {
      type = type_specifiers();
      var = param_decl();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (definingFunc.is_var_redeclare(var.name)){
      errorHandler.error(loc, "Parameter " + var.name + " has been declared in function " + definingFunc.name);
      {if (true) return;}
    }
    else {
      var.type = type + "";
      definingFunc.paramTab.add(var);
    }
    System.out.print("\u005ct\u005ct\u005ctFunction parameter declaration\u005cn");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//参数名称及特性声明
  static final public VariableType param_decl() throws ParseException {
 /*@bgen(jjtree) param_decl */
        SimpleNode jjtn000 = new SimpleNode(JJTPARAM_DECL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);VariableType var = new VariableType();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
      case 48:
        ptr_arr(var);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      param_direct_decl(var);
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
    {if (true) return var;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//参数名称
  static final public void param_direct_decl(VariableType var) throws ParseException {
 /*@bgen(jjtree) param_direct_decl */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAM_DIRECT_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null, t1 = null;
  String name;
    try {
      name = name();
    var.name = name;
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 44:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_4;
        }
        jj_consume_token(44);
        t1 = jj_consume_token(INTEGER_LITERAL);

        jj_consume_token(45);
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (var.type != null) {
      switch (var.type) {
        case "int":
          var.size = 4;
          break;
        case "float":
          var.size = 4;
          break;
        case "double":
          var.size = 8;
          break;
        case "char":
          var.size = 1;
          break;
      }
    }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public boolean storage() throws ParseException {
 /*@bgen(jjtree) storage */
  SimpleNode jjtn000 = new SimpleNode(JJTSTORAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        t = jj_consume_token(STATIC);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (t != null) {
      jjtn000.setText((" type: "+t.image));
      System.out.print("\u005ct\u005ct\u005ctStorage class specifiers \u005cn");
      {if (true) return true;}
    }
    else
      {if (true) return false;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//语句块
  static final public void block() throws ParseException, Exception {
 /*@bgen(jjtree) block */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(46);
      if (jj_2_3(2147483647)) {
        decl_list();
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case CASE:
      case DFLT:
      case IF:
      case SWITCH:
      case WHILE:
      case FOR:
      case DO:
      case GOTO:
      case CONTINUE:
      case BREAK:
      case RETURN:
      case IDENTIFIER:
      case 39:
      case 42:
      case 46:
      case 48:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
        stmt_list();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(47);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    System.out.print("\u005ct\u005ct\u005ctCompound statements\u005cn");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//Declation list
  static final public void decl_list() throws ParseException, Exception {
 /*@bgen(jjtree) decl_list */
  SimpleNode jjtn000 = new SimpleNode(JJTDECL_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_5:
      while (true) {
        decls();
        if (jj_2_4(2147483647)) {
          ;
        } else {
          break label_5;
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    System.out.print("\u005ct\u005ct\u005ctVariable declaration list\u005cn");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void decls() throws ParseException, Exception {
 /*@bgen(jjtree) decls */
        SimpleNode jjtn000 = new SimpleNode(JJTDECLS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);VariableType typeVar = new VariableType();
    try {
      decl_specifiers(typeVar);
      init_decl_list(typeVar);
      jj_consume_token(42);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    System.out.print("\u005ct\u005ct\u005ctVariable declaration specifiers\u005cn");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//Declation specifiers
  static final public void decl_specifiers(VariableType typeVar) throws ParseException {
 /*@bgen(jjtree) decl_specifiers */
        SimpleNode jjtn000 = new SimpleNode(JJTDECL_SPECIFIERS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String type = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        storage_specifiers(typeVar);
        if (jj_2_5(2147483647)) {
          decl_specifiers(typeVar);
        } else {
          ;
        }
        break;
      case VOID:
      case CHAR:
      case INT:
      case FLOAT:
      case DOUBLE:
        type = type_specifiers();
        if (jj_2_6(2147483647)) {
          decl_specifiers(typeVar);
        } else {
          ;
        }
        break;
      case CONST:
        type_qualifiers(typeVar);
        if (jj_2_7(2147483647)) {
          decl_specifiers(typeVar);
        } else {
          ;
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if(type !=null)
      typeVar.type = type + "";
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//Storage class specifiers
  static final public void storage_specifiers(VariableType typeVar) throws ParseException {
 /*@bgen(jjtree) storage_specifiers */
  SimpleNode jjtn000 = new SimpleNode(JJTSTORAGE_SPECIFIERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      t = jj_consume_token(STATIC);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {
      jjtn000.setText((" type: "+t.image));
      typeVar.isStatic = true;
      System.out.print("\u005ct\u005ct\u005ctStorage class specifiers \u005cn");
    }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//Type specifiers
  static final public String type_specifiers() throws ParseException {
 /*@bgen(jjtree) type_specifiers */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE_SPECIFIERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
        t = jj_consume_token(VOID);
        break;
      case CHAR:
        t = jj_consume_token(CHAR);
        break;
      case INT:
        t = jj_consume_token(INT);
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
        break;
      case DOUBLE:
        t = jj_consume_token(DOUBLE);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setText((" type: "+t.image));
    System.out.print("\u005ct\u005ct\u005ctType specifiers. \u005cn");
    {if (true) return t.image;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//Type Qualifiers
  static final public void type_qualifiers(VariableType typeVar) throws ParseException {
 /*@bgen(jjtree) type_qualifiers */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE_QUALIFIERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      t = jj_consume_token(CONST);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setText((" type: "+t.image));
    typeVar.isConst = true;
    System.out.println("\u005ct\u005ct\u005ctType qualifiers ");
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//Init declarator list
  static final public void init_decl_list(VariableType typeVar) throws ParseException, Exception {
 /*@bgen(jjtree) init_decl_list */
  SimpleNode jjtn000 = new SimpleNode(JJTINIT_DECL_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      init_decl(typeVar);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 41:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_6;
        }
        jj_consume_token(41);
        init_decl(typeVar);
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    System.out.print("\u005ct\u005ct\u005ctVariable init declarator list\u005cn");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//Init declarator
  static final public void init_decl(VariableType typeVar) throws ParseException, Exception {
 /*@bgen(jjtree) init_decl */
  SimpleNode jjtn000 = new SimpleNode(JJTINIT_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
  VariableType lhs, rhs;
    try {
      lhs = var_decl();
      if (definingFunc.is_var_redeclare(lhs.name)){
        errorHandler.error(loc, "Variable " + lhs.name + " has been declared in function " + definingFunc.name);
        {if (true) return;}
      }
      lhs.isStatic = typeVar.isStatic;
      lhs.isConst = typeVar.isConst;
      lhs.type = typeVar.type + "";
      definingFunc.varTab.add(lhs);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 40:
        t = jj_consume_token(40);
        rhs = init();
      jjtn000.setText((" value: "+t.image));
      checkRes = symTab.checkAssignType(lhs.type, rhs.type);
      if(checkRes == 1)
        errorHandler.warning(loc, "Loss will occur while assigning " + rhs.name + " to " + lhs.name);
      else if(checkRes == 2)
        errorHandler.error(loc, "Cannot assign " + rhs.name + " to " + lhs.name);
                        else
        lhs.value = rhs.name + "";
      System.out.print("\u005ct\u005ct\u005ctVariable init declarator\u005cn");
      assign_var(lhs.name);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public VariableType var_decl() throws ParseException {
 /*@bgen(jjtree) var_decl */
        SimpleNode jjtn000 = new SimpleNode(JJTVAR_DECL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);VariableType var = new VariableType();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
      case 48:
        ptr_arr(var);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      var_direct_decl(var);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    System.out.print("\u005ct\u005ct\u005ctVariable declarator\u005cn");
    {if (true) return var;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void var_direct_decl(VariableType var) throws ParseException {
 /*@bgen(jjtree) var_direct_decl */
    SimpleNode jjtn000 = new SimpleNode(JJTVAR_DIRECT_DECL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t = null, t1 = null;
    String name;
    try {
      name = name();
    jjtn000.setText((" name: " + name));
    var.name = name;
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 44:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_7;
        }
        jj_consume_token(44);
        t1 = jj_consume_token(INTEGER_LITERAL);

        jj_consume_token(45);
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (var.type != null) {
      switch (var.type) {
        case "int":
          var.size = 4;
          break;
        case "float":
          var.size = 4;
          break;
        case "double":
          var.size = 8;
          break;
        case "char":
          var.size = 1;
          break;
      }
    }
    System.out.print("\u005ct\u005ct\u005ctVariable direct declarator\u005cn");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//Pointer
  static final public void ptr_arr(VariableType var) throws ParseException {
 /*@bgen(jjtree) ptr_arr */
  SimpleNode jjtn000 = new SimpleNode(JJTPTR_ARR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);var.point_level++;
  var.isPointer = true;
  Token t = null;
    try {
      if (jj_2_8(2)) {
        jj_consume_token(44);
        t = jj_consume_token(INTEGER_LITERAL);
        jj_consume_token(45);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setText((" type:[]  size: "+t.image));
    var.length = Integer.parseInt(t.image);
    var.isArray = true;
      } else if (jj_2_9(2)) {
        jj_consume_token(48);
        ptr_arr(var);
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;

      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 48:
          t = jj_consume_token(48);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setText((" type: "+ t.image));
    System.out.print("\u005ct\u005ct\u005ctPointer or Array \u005cn");
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//Initializer
  static final public VariableType init() throws ParseException, Exception {
 /*@bgen(jjtree) init */
        SimpleNode jjtn000 = new SimpleNode(JJTINIT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);VariableType var = null;
    try {
      var = assign_expr();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return var;}
    System.out.print("\u005ct\u005ct\u005ctVariable initializer\u005cn");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//Initializer list
  static final public void init_list() throws ParseException, Exception {
 /*@bgen(jjtree) init_list */
  SimpleNode jjtn000 = new SimpleNode(JJTINIT_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      init();
      label_8:
      while (true) {
        if (jj_2_10(2)) {
          ;
        } else {
          break label_8;
        }
        jj_consume_token(41);
        init();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    System.out.print("\u005ct\u005ct\u005ctVariable initializer list\u005cn");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//语句列表
  static final public void stmt_list() throws ParseException, Exception {
 /*@bgen(jjtree) stmt_list */
  SimpleNode jjtn000 = new SimpleNode(JJTSTMT_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_9:
      while (true) {
        stmt();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case CASE:
        case DFLT:
        case IF:
        case SWITCH:
        case WHILE:
        case FOR:
        case DO:
        case GOTO:
        case CONTINUE:
        case BREAK:
        case RETURN:
        case IDENTIFIER:
        case 39:
        case 42:
        case 46:
        case 48:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_9;
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    System.out.print("\u005ct\u005ct\u005ctstatement list\u005cn");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//语句
  static final public void stmt() throws ParseException, Exception {
 /*@bgen(jjtree) stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_11(2)) {
        case_default_stmt();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case 39:
        case 42:
        case 48:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
          expr_stmt();
          break;
        case 46:
          block();
          break;
        case IF:
        case SWITCH:
          if_switch_stmt();
          break;
        case WHILE:
        case FOR:
        case DO:
          while_for_stmt();
          break;
        case GOTO:
        case CONTINUE:
        case BREAK:
        case RETURN:
          jump_stmt();
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    System.out.print("\u005ct\u005ct\u005ctStatement\u005cn");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//if 和 switch 语句
  static final public void if_switch_stmt() throws ParseException, Exception {
 /*@bgen(jjtree) if_switch_stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTIF_SWITCH_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  VariableType var = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        t = jj_consume_token(IF);
        jj_consume_token(39);
        expr();
        jj_consume_token(43);
    jjtn000.setText((" type: "+t.image));
    label_stack[label_pos++] = label++;
    pr_ir.write("\u005ctif (not " + arr[top - 1] + ") \u005cn\u005ctgoto FALSE_" + label_stack[label_pos - 1] + "\u005cn");
        stmt();
    pr_ir.write("\u005ctgoto END_" + label_stack[label_pos - 1] + "\u005cn");
    pr_ir.write("FALSE_" + label_stack[label_pos - 1] + ":\u005cn");
        if (jj_2_12(2)) {
          t = jj_consume_token(ELSE);
          stmt();
        } else {
          ;
        }
    jjtn000.setText((" type: "+t.image));
    pr_ir.write("END_" + label_stack[label_pos - 1] + ":\u005cn");
    label_pos--;
        break;
      case SWITCH:
        t = jj_consume_token(SWITCH);
        jj_consume_token(39);
        var = expr();
    if(!var.isIntorChar())
      errorHandler.error(loc, "Variable " + var.name + " cannot be used in 'switch' , should be an Integer or character");
    jjtn000.setText((" type: "+t.image));
    switch_expr = arr[top - 1];
    label_stack[label_pos++] = label++;
        jj_consume_token(43);
        stmt();
    pr_ir.print("END_" + label_stack[label_pos - 1] + ":\u005cn");
    label_pos--;
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    System.out.println("\u005ct\u005ct\u005ctSelection statement ");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//case && default 语句
  static final public void case_default_stmt() throws ParseException, Exception {
 /*@bgen(jjtree) case_default_stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTCASE_DEFAULT_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
  Token type = null;
  String name;
  VariableType var = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        name = name();
        jj_consume_token(49);
    int pos = definingFunc.is_var_declare_param(name);
    if (pos != -1)
      var = symTab.get(definingFunc.paramTab, pos);
    else {
      pos = definingFunc.is_var_declare_var(name);
            if (pos != -1)
              var = symTab.get(definingFunc.varTab, pos);
            else {
              pos = symTab.is_globalVar_declare(name);
              if (pos != -1)
                var = symTab.get(symTab.globalVarTab, pos);
              else
                errorHandler.error(loc, "Variable " + name + " is not defined in function " + definingFunc.name);
      }
    }
    if(var == null || var.value == null)
      errorHandler.error(loc, "Variable " + name + " is not initialized in function " + definingFunc.name);
    jjtn000.setText((" name: "+name));
    pr_ir.write(name + ":\u005cn");
        stmt();
        break;
      case CASE:
        type = jj_consume_token(CASE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
          t = jj_consume_token(INTEGER_LITERAL);
          break;
        case CHARACTER_LITERAL:
          t = jj_consume_token(CHARACTER_LITERAL);
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(49);
    if(type != null){
      jjtn000.setText((" value: "+t.image));
      jjtn000.setText((" type: "+type.image));
    }
    label_stack[label_pos++] = label++;
    pr_ir.write("\u005ctt=" + switch_expr + "==" + t.image + "\u005cn");
    pr_ir.write("\u005ctif(not t)\u005cn");
    pr_ir.write("\u005ctgoto END_" + label_stack[label_pos - 1] + "\u005cn");
        stmt();
    pr_ir.write("END_" + label_stack[label_pos - 1] + ":\u005cn");
    label_pos--;
        break;
      case DFLT:
        type = jj_consume_token(DFLT);
        jj_consume_token(49);
    jjtn000.setText((" type: "+type.image));
    pr_ir.write("DEFAULT_" + label_stack[label_pos - 1] + ": \u005cn");
        stmt();
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    System.out.println("\u005ct\u005ct\u005ctLabeled statement ");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//while , do…while, for
  static final public void while_for_stmt() throws ParseException, Exception {
 /*@bgen(jjtree) while_for_stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE_FOR_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
        t = jj_consume_token(WHILE);
     jjtn000.setText((" type: "+t.image));
     label_stack[label_pos++] = label++;
     pr_ir.write("BEGIN_" + label_stack[label_pos - 1] + ":\u005cn");
        jj_consume_token(39);
        expr();
        jj_consume_token(43);
    pr_ir.write("\u005ctif (not " + arr[top - 1] + ")\u005cn");
    pr_ir.write("\u005ctgoto END_" + label_stack[label_pos - 1] + "\u005cn");
        stmt();
    pr_ir.write("\u005ctgoto BEGIN_" + label_stack[label_pos - 1] + "\u005cn");
    pr_ir.write("END_" + label_stack[label_pos - 1] + ":\u005cn");
    label_pos--;
        break;
      case DO:
        t = jj_consume_token(DO);
    jjtn000.setText((" type: "+t.image));
    label_stack[label_pos++] = label++;
    pr_ir.write("BEGIN_" + label_stack[label_pos - 1] + ":\u005cn");
        stmt();
        t = jj_consume_token(WHILE);
        jj_consume_token(39);
        expr();
        jj_consume_token(43);
        jj_consume_token(42);
    jjtn000.setText((" type: "+t.image));
    pr_ir.write("\u005ctif (" + arr[top - 1] + ")\u005cn");
    pr_ir.write("\u005ctgoto BEGIN_" + label_stack[label_pos - 1] + "\u005cn");
    pr_ir.write("END_" + label_stack[label_pos - 1] + ":\u005cn");
    label_pos--;
        break;
      case FOR:
        t = jj_consume_token(FOR);
        jj_consume_token(39);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case 39:
        case 48:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
          expr();
          break;
        default:
          jj_la1[22] = jj_gen;
          ;
        }
        jj_consume_token(42);
    jjtn000.setText((" type: "+t.image));
    label_stack[label_pos++] = label++;
    pr_ir.write("BEGIN_" + label_stack[label_pos - 1] + ":\u005cn");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case 39:
        case 48:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
          expr();
          break;
        default:
          jj_la1[23] = jj_gen;
          ;
        }
    pr_ir.write("\u005ctif(not " + arr[top - 1] + ")\u005cn");
    pr_ir.write("\u005ctgoto END_" + label_stack[label_pos - 1] + "\u005cn");
        jj_consume_token(42);
    pr_ir.write("\u005ctgoto body_" + label_stack[label_pos - 1] + "\u005cn");
    pr_ir.write("inc_" + label_stack[label_pos - 1] + ":\u005cn");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case 39:
        case 48:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
          expr();
          break;
        default:
          jj_la1[24] = jj_gen;
          ;
        }
        jj_consume_token(43);
    pr_ir.write("\u005ctgoto BEGIN_" + label_stack[label_pos - 1] + "\u005cn");
    pr_ir.write("body_" + label_stack[label_pos - 1] + ":\u005cn");
        stmt();
    pr_ir.write("goto inc_" + label_stack[label_pos - 1] + "\u005cn");
    pr_ir.write("END_" + label_stack[label_pos - 1] + ":\u005cn");
    label_pos--;
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    System.out.println("\u005ct\u005ct\u005ctIteration statement ");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//goto & continue & return & break
  static final public void jump_stmt() throws ParseException, Exception {
 /*@bgen(jjtree) jump_stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTJUMP_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
  Token type = null;
  int checkRes;
  VariableType var = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GOTO:
        type = jj_consume_token(GOTO);
        t = jj_consume_token(IDENTIFIER);
        jj_consume_token(42);
    jjtn000.setText((" type: "+type.image));
    jjtn000.setText((" name: "+t.image));
    pr_ir.write("\u005ctgoto " + t.image + "\u005cn");
        break;
      case CONTINUE:
        type = jj_consume_token(CONTINUE);
        jj_consume_token(42);
    jjtn000.setText((" type: "+type.image));
    pr_ir.write("\u005ctgoto BEGIN_" + label_stack[label_pos - 1] + "\u005cn");
        break;
      case BREAK:
        type = jj_consume_token(BREAK);
        jj_consume_token(42);
    jjtn000.setText((" type: "+type.image));
    pr_ir.write("\u005ctgoto END_" + label_stack[label_pos - 1] + "\u005cn");
        break;
      case RETURN:
        type = jj_consume_token(RETURN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case 39:
        case 48:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
          var = expr();
    jjtn000.setText((" type: "+type.image));
    assign_var("v0");
    if (var.isConst){
      checkRes = symTab.checkAssignType(definingFunc.returnType, var.type);
      if(checkRes == 2)
        errorHandler.error(loc, "Return value " + var.name + " type is wrong in function " + definingFunc.name);
      else if(checkRes == 1)
        errorHandler.error(loc, "Loss will occur " + "while using " + var.name + " as return value in function " + definingFunc.name);
      definingFunc.returnValue.type = var.type + "";
      definingFunc.returnValue.value = var.name + "";
    }
    else{
      int pos = definingFunc.is_var_declare_param(var.name);
      if (pos != -1)
        definingFunc.returnValue = symTab.get(definingFunc.paramTab, pos);
      else {
        pos = definingFunc.is_var_declare_var(var.name);
        if (pos != -1)
          definingFunc.returnValue = symTab.get(definingFunc.varTab, pos);
        else
          errorHandler.error(loc, "Return value " + var.name + " is not defined in function " + definingFunc.name);
      }
       checkRes = symTab.checkAssignType(definingFunc.returnType, var.type);
       if(checkRes == 2)
         errorHandler.error(loc, "Return value " + var.name + " type is wrong in function " + definingFunc.name);
       else if(checkRes == 1)
         errorHandler.error(loc, "Loss will occur " + "while using " + var.name + " as return value in function " + definingFunc.name);
           }
          break;
        default:
          jj_la1[26] = jj_gen;
          ;
        }
        jj_consume_token(42);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    System.out.println("\u005ct\u005ct\u005ctJump statement ");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//expression statement
  static final public void expr_stmt() throws ParseException, Exception {
 /*@bgen(jjtree) expr_stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case 39:
      case 48:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
        expr();
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      jj_consume_token(42);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    System.out.print("\u005ct\u005ct\u005ctExpression statement\u005cn");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//function call
  static final public void funcall_stmt(VariableType returnVar) throws ParseException, Exception {
 /*@bgen(jjtree) funcall_stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCALL_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
  String name;
  FunctionType function;
    try {
      name = name();
      jj_consume_token(39);
  jjtn000.setText((" name: "+name));
  int pos = symTab.is_func_declare(name);
  if (pos == -1){
    errorHandler.error(loc, "Function " + name + " is not declared");
    returnVar = null;
    {if (true) return;}
  }
  else
    function = symTab.getFunc(pos);
  pr_ir.write("\u005ctcall " + name + "(");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
        funcall_params_list(function);
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      jj_consume_token(43);
    System.out.print("\u005ct\u005ct\u005ctFunction call\u005cn");
    pr_ir.write(")\u005cn");
    arr[top ++] = "v0";
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    returnVar.name = function.name;
    returnVar.type = function.returnType;
    returnVar.isConst = true;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void funcall_params_list(FunctionType function) throws ParseException, Exception {
 /*@bgen(jjtree) funcall_params_list */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCALL_PARAMS_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
  int param_index = 0;
  String param_name;
    try {
      param_name = param_call(function, param_index);
    pr_ir.write(param_name);
    param_index++;
      label_10:
      while (true) {
        if (jj_2_13(2)) {
          ;
        } else {
          break label_10;
        }
        jj_consume_token(41);
        param_name = param_call(function, param_index);
    pr_ir.write(", " + param_name);
    param_index++;
      }
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
    if (param_index != function.getParamNum())
      errorHandler.error(loc, "Parameter num is wrong while calling function " + function.name);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public String param_call(FunctionType function, int index) throws ParseException, Exception {
 /*@bgen(jjtree) param_call */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAM_CALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
  VariableType checkParam = new VariableType();
  String name;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        name = name();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setText((" name: "+name));
          int pos = definingFunc.is_var_declare_param(name);
    if (pos != -1)
      checkParam = symTab.get(definingFunc.paramTab, pos);
    else {
      pos = definingFunc.is_var_declare_var(name);
      if (pos != -1)
        checkParam = symTab.get(definingFunc.varTab, pos);
      else {
        pos = symTab.is_globalVar_declare(name);
        if (pos != -1)
          checkParam = symTab.get(symTab.globalVarTab, pos);
        else
          errorHandler.error(loc, "Variable " + name + " is not defined in function " + definingFunc.name);
          {if (true) return name;}
      }
    }
    if (index < function.getParamNum()){
            checkRes = symTab.checkCallType(checkParam, symTab.get(function.paramTab, index));
            if (checkRes == 2)
              errorHandler.error(loc, "Parameter " + name + " type is wrong in function " + function.name);
            else if(checkRes == 1)
              errorHandler.warning(loc, "Loss will occur while using " + name + " as a parameter in function " + function.name);
    }
    {if (true) return name;}
        break;
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
        constant(checkParam);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if (index < function.getParamNum()){
                  checkRes = symTab.checkCallType(checkParam, symTab.get(function.paramTab, index));
                  if(checkRes == 2)
              errorHandler.error(loc, "Parameter " + checkParam.name + " type is wrong in function " + function.name);
                  else if(checkRes == 1)
                    errorHandler.warning(loc, "Loss will occur while using " + checkParam.name + " as parameter in function " + function.name);
          }
          {if (true) return checkParam.name;}
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//expression
  static final public VariableType expr() throws ParseException, Exception {
 /*@bgen(jjtree) expr */
        SimpleNode jjtn000 = new SimpleNode(JJTEXPR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);VariableType var = null;
    try {
      var = assign_expr();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 41:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_11;
        }
        jj_consume_token(41);
        assign_expr();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
                {if (true) return var;}
    System.out.print("\u005ct\u005ct\u005ctExpression\u005cn");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//Assignment Expression
  static final public VariableType assign_expr() throws ParseException, Exception {
 /*@bgen(jjtree) assign_expr */
        SimpleNode jjtn000 = new SimpleNode(JJTASSIGN_EXPR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);boolean isCompound = false;
        VariableType var, rhs;
        String ope = "";
    try {
      if (jj_2_14(2147483647)) {
        var = unary_expr();
        ope = assign_operator();

        rhs = assign_expr();
      if (var.isConst){
        errorHandler.error(loc, "Const Value " + rhs.name + " cannot be assigned");
        {if (true) return var;}
      }
      if(rhs != null){
              if(rhs.isConst)
                var.value = rhs.name + "";
              else if (rhs != null && rhs.value == null)
                errorHandler.error(loc, "Variable " + rhs.name + " is not initialized in function " + definingFunc.name);
              else if(ope.equals("-=") && rhs != null && rhs.value.equals("0")){
                errorHandler.error(loc, "Variable " + var.name + " is dividing zero");
                isCompound = true;
              }
              else
                var.value = rhs.value;
              if(ope.equals("&=") || ope.equals("|=") || ope.equals("^=") || ope.equals("<<=") || ope.equals(">>=")|| ope.equals("%=")){
                if(!symTab.checkCalculateType(var.type, rhs.type)){
                  errorHandler.error(loc, "Variable " + var.name + " or Variable " + var.name + " cannot be calculated with &, |, ^, <<, >>, %");
                }
                isCompound = true;
              }
              else if(ope.equals("+=") || ope.equals("-=") || ope.equals("*="))
                isCompound = true;
              if(var.isPointer){
                if(!rhs.type.equals("int") && !rhs.isPointer )
                  errorHandler.error(loc, "Must be an integer while calculating pointer" + var.name);
                if(isCompound)
                {
                  pr_ir.write("\u005ctt" + i + "=" + arr[top - 1] + "*" + var.size + "\u005cn");
                  arr[top - 1] = "t" + i ++;
                }
              }
              if (rhs != null){
                      int res = symTab.checkAssignType(var.type, rhs.type);
                      if(res == 2)
                        errorHandler.error(loc,  rhs.name + " cannot be assigned to Variable " + var.name);
                                        if(res == 1)
                                                errorHandler.warning(loc, "Loss will occur while assigning " + rhs.name + " to Variable "       + var.name);
              }
        var_assign();
      }
      } else if (jj_2_15(3)) {
        var = cond_expr();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return var;}
    System.out.print("\u005ct\u005ct\u005ctAssignment expression\u005cn");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//Assignment operator
  static final public String assign_operator() throws ParseException {
 /*@bgen(jjtree) assign_operator */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGN_OPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 40:
        t = jj_consume_token(40);
      arr[top++] = t.image;
        break;
      case 50:
        t = jj_consume_token(50);
      arr[top++] = "=" + arr[top - 2] + "*";
        break;
      case 51:
        t = jj_consume_token(51);
      arr[top++] = "=" + arr[top - 2] + "/";
        break;
      case 52:
        t = jj_consume_token(52);
      arr[top++] = "=" + arr[top - 2] + "%";
        break;
      case 53:
        t = jj_consume_token(53);
      arr[top++] = "=" + arr[top - 2] + "+";
        break;
      case 54:
        t = jj_consume_token(54);
      arr[top++] = "=" + arr[top - 2] + "-";
        break;
      case 55:
        t = jj_consume_token(55);
      arr[top++] = "=" + arr[top - 2] + "<< ";
        break;
      case 56:
        t = jj_consume_token(56);
      arr[top++] = "=" + arr[top - 2] + ">>";
        break;
      case 57:
        t = jj_consume_token(57);
      arr[top++] = "=" + arr[top - 2] + "&";
        break;
      case 58:
        t = jj_consume_token(58);
      arr[top++] = "=" + arr[top - 2] + "^";
        break;
      case 59:
        t = jj_consume_token(59);
      arr[top++] = "=" + arr[top - 2] + "|";
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setText((" value: "+t.image));
    System.out.print("\u005ct\u005ct\u005ctAssignment operator\u005cn");
    {if (true) return t.image;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//Unary expression
  static final public VariableType unary_expr() throws ParseException, Exception {
 /*@bgen(jjtree) unary_expr */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARY_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
  VariableType var = null;
    try {
      if (jj_2_16(3)) {
        var = postfix_expr();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 60:
          t = jj_consume_token(60);
            if(t!=null)
              jjtn000.setText((" value: "+t.image));
          var = unary_expr();
          String t1 = arr[top - 1];
          if (var.isPointer)
            arr[top++] = "+" + var.size;
          else {
            if(!var.isIntorChar())
              errorHandler.error(loc, "Variable " + var.name + " cannot be calculated with " + "++");
      arr[top ++] = "+" + 1;
          }
            u_assign();
            assign_var(t1);
          break;
        case 61:
          t = jj_consume_token(61);
          var = unary_expr();
          jjtn000.setText((" value: "+t.image));
    t1 = arr[top - 1];
    if (var.isPointer)
      arr[top++] = "-" + var.size;
    else{
      arr[top ++] = "-" + 1;
      if(!var.isIntorChar())
        errorHandler.error(loc, "Variable " + var.name + " cannot be calculated with " + "--");
    }
    u_assign();
    assign_var(t1);
          break;
        case 62:
          t = jj_consume_token(62);
          jjtn000.setText((" value: "+t.image));
      arr[top++] = "-";
          var = unary_expr();
    t1 = arr[top - 1];
    u_assign();
          break;
        case 63:
          t = jj_consume_token(63);
          var = unary_expr();
          jjtn000.setText((" value: "+t.image));
    t1 = arr[top - 1];
    address();
    if(!var.isIntorChar())
      errorHandler.error(loc, "Variable " + var.name + " cannot be calculated with " + "&");
          break;
        case 48:
          t = jj_consume_token(48);
          var = unary_expr();
          jjtn000.setText((" value: "+t.image));
    t1 = arr[top - 1];
    mem();
          break;
        case 64:
          t = jj_consume_token(64);
          jjtn000.setText((" value: "+t.image));
      arr[top++] = "~";
          var = unary_expr();
    t1 = arr[top - 1];
    u_assign();
    if(!var.isIntorChar())
      errorHandler.error(loc, "Variable " + var.name + " cannot be calculated with " + "&");
          break;
        case 65:
          t = jj_consume_token(65);
          jjtn000.setText((" value: "+t.image));
      arr[top++] = "!";
          var = unary_expr();
    t1 = arr[top - 1];
    u_assign();
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return var;}
    System.out.println("\u005ct\u005ct\u005ctUnary expression ");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//Postfix expression
  static final public VariableType postfix_expr() throws ParseException, Exception {
 /*@bgen(jjtree) postfix_expr */
  SimpleNode jjtn000 = new SimpleNode(JJTPOSTFIX_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
  VariableType var = null;
  VariableType numVar;
    try {
      var = prefix_expr();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 44:
        case 60:
        case 61:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 44:
          jj_consume_token(44);
          numVar = expr();
          jj_consume_token(45);
            if(!var.isArray)
                errorHandler.error(loc, "Variable " + var.name + " is not an array and cannot be calculated with '[]'");
            else if(!numVar.type.equals("int"))
              errorHandler.error(loc, var.name + "is not an Integer and cannot be used as an index");
            pr_ir.write("\u005ctt" + i + "=" + arr[top - 1] + "*" + numVar.size + "\u005cn");
            arr[top - 1] = "+t" + i ++ ;
            u_assign();
            mem();
          break;
        case 60:
          t = jj_consume_token(60);
            jjtn000.setText((" value: "+t.image));
            arr[top++] = "";
            String t1 = arr[top - 2];
            u_assign();
            if(var.isPointer)
              pr_ir.write("\u005ct" + t1 + "=" + t1 + "+" + var.size + "\u005cn");
            else if(!var.isIntorChar()){
              errorHandler.error(loc, var.name + "is not an Integer or Charater and cannot be calculated with '++'");
              pr_ir.write("\u005ct" + t1 + "=" + t1 + "+" + 1 + "\u005cn");
            }
            else
              pr_ir.write("\u005ct" + t1 + "=" + t1 + "+" + 1 + "\u005cn");
          break;
        case 61:
          t = jj_consume_token(61);
                jjtn000.setText((" value: "+t.image));
    arr[top++] = "";
    t1 = arr[top - 2];
    u_assign();
    if(var.isPointer)
      pr_ir.write("\u005ct" + t1 + "=" + t1 + "-" + var.size + "\u005cn");
    else if(!var.isIntorChar()){
      errorHandler.error(loc, var.name + "is not an Integer or Charater and cannot be calculated with '++'");
      pr_ir.write("\u005ct" + t1 + "=" + t1 + "-" + 1 + "\u005cn");
    }
    else
      pr_ir.write("\u005ct" + t1 + "=" + t1 + "-" + 1 + "\u005cn");
          break;
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return var;}
    System.out.print("\u005ct\u005ct\u005ctPostfix expression\u005cn");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//prefix expression
  static final public VariableType prefix_expr() throws ParseException, Exception {
 /*@bgen(jjtree) prefix_expr */
  SimpleNode jjtn000 = new SimpleNode(JJTPREFIX_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  VariableType var = new VariableType();
  String name;
    try {
      if (jj_2_17(2)) {
        funcall_stmt(var);
      if (var.name == null)
        {if (true) return null;}
      else
        {if (true) return var;}
      System.out.print("\u005ct\u005ct\u005ctCall function\u005cn");
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          name = name();
      jjtn000.setText((" name: " + name));
      int pos = definingFunc.is_var_declare_param(name);
      if (pos != -1)
        var = symTab.get(definingFunc.paramTab, pos);
      else {
                pos = definingFunc.is_var_declare_var(name);
                      if (pos != -1)
                        var = symTab.get(definingFunc.varTab, pos);
                      else {
                        pos = symTab.is_globalVar_declare(name);
                        if (pos != -1)
                          var = symTab.get(symTab.globalVarTab, pos);
                        else{
                          errorHandler.error(loc, "Variable " + name + " is not defined in function " + definingFunc.name);
                           var = null;
                        }
                      }
                  }
      arr[top++] = name;
          break;
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
          constant(var);
          break;
        case 39:
          jj_consume_token(39);
          var = expr();
          jj_consume_token(43);
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return var;}
      System.out.print("\u005ct\u005ct\u005ctPrimary expression\u005cn");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//conditional expression
  static final public VariableType cond_expr() throws ParseException, Exception {
 /*@bgen(jjtree) cond_expr */
        SimpleNode jjtn000 = new SimpleNode(JJTCOND_EXPR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);VariableType var = null;
    try {
      var = logical_or_expr();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return var;}
    System.out.print("\u005ct\u005ct\u005ctConditional expression\u005cn");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//logical or expression
  static final public VariableType logical_or_expr() throws ParseException, Exception {
 /*@bgen(jjtree) logical_or_expr */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICAL_OR_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
  VariableType var = null;
    try {
      var = logical_and_expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 66:
        t = jj_consume_token(66);
    jjtn000.setText((" value: "+t.image));
    arr[top++] = t.image;
    VariableType rhs;
        rhs = logical_or_expr();
    System.out.print("\u005ct\u005ct\u005ctLogical OR expression\u005cn");
    assign();
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return var;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//logical and expression
  static final public VariableType logical_and_expr() throws ParseException, Exception {
 /*@bgen(jjtree) logical_and_expr */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICAL_AND_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
  VariableType var = null;
    try {
      var = Inclusive_or_expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 67:
        t = jj_consume_token(67);
    jjtn000.setText((" value: "+t.image));
    arr[top++] = t.image;
    VariableType rhs;
        rhs = logical_and_expr();
    System.out.print("\u005ct\u005ct\u005ctLogical And expression\u005cn");
    assign();
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return var;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//Inclusive Or expression
  static final public VariableType Inclusive_or_expr() throws ParseException, Exception {
 /*@bgen(jjtree) Inclusive_or_expr */
  SimpleNode jjtn000 = new SimpleNode(JJTINCLUSIVE_OR_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
  VariableType var = null;
    try {
      var = exclusive_or_expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 68:
        t = jj_consume_token(68);
    jjtn000.setText((" value: "+t.image));
    arr[top++] = t.image;
    VariableType rhs;
        rhs = Inclusive_or_expr();
    if(!symTab.checkCalculateType(var.type, rhs.type))
      errorHandler.error(loc, "Variable " + var.name + " or Variable " + rhs.name + " cannot be used in calculation '|' ");
    System.out.print("\u005ct\u005ct\u005ctInclusive OR expression\u005cn");
    assign();
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return var;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//Exclusive Or expression
  static final public VariableType exclusive_or_expr() throws ParseException, Exception {
 /*@bgen(jjtree) exclusive_or_expr */
  SimpleNode jjtn000 = new SimpleNode(JJTEXCLUSIVE_OR_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
  VariableType var = null;
    try {
      var = and_expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 69:
        t = jj_consume_token(69);
    jjtn000.setText((" value: "+t.image));
    arr[top++] = t.image;
    VariableType rhs;
        rhs = exclusive_or_expr();
    if(!symTab.checkCalculateType(var.type, rhs.type))
      errorHandler.error(loc, "Variable " + var.name + " or Variable " + rhs.name + " cannot be used in calculation '^' ");
    System.out.print("\u005ct\u005ct\u005ctExclusive OR expression\u005cn");
    assign();
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return var;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//And expression
  static final public VariableType and_expr() throws ParseException, Exception {
 /*@bgen(jjtree) and_expr */
  SimpleNode jjtn000 = new SimpleNode(JJTAND_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
  VariableType var = null;
    try {
      var = equal_expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 63:
        t = jj_consume_token(63);
    jjtn000.setText((" value: "+t.image));
    arr[top++] = t.image;
    VariableType rhs;
        rhs = and_expr();
    if(!symTab.checkCalculateType(var.type, rhs.type))
      errorHandler.error(loc, "Variable " + var.name + " or Variable " + rhs.name + " cannot be used in calculation '&' ");
    System.out.print("\u005ct\u005ct\u005ctAnd expression\u005cn");
    assign();
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return var;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//equality expression
  static final public VariableType equal_expr() throws ParseException, Exception {
 /*@bgen(jjtree) equal_expr */
  SimpleNode jjtn000 = new SimpleNode(JJTEQUAL_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
  VariableType var = null;
    try {
      var = relation_expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 70:
      case 71:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 70:
          t = jj_consume_token(70);
          break;
        case 71:
          t = jj_consume_token(71);
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
    jjtn000.setText((" value: "+t.image));
    arr[top++] = t.image;
        equal_expr();
    System.out.print("\u005ct\u005ct\u005ctEquality expression\u005cn");
    assign();
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return var;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//Relational expression
  static final public VariableType relation_expr() throws ParseException, Exception {
 /*@bgen(jjtree) relation_expr */
    SimpleNode jjtn000 = new SimpleNode(JJTRELATION_EXPR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t = null;
    VariableType var = null;
    try {
      var = shift_expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 72:
      case 73:
      case 74:
      case 75:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 72:
          t = jj_consume_token(72);
          break;
        case 73:
          t = jj_consume_token(73);
          break;
        case 74:
          t = jj_consume_token(74);
          break;
        case 75:
          t = jj_consume_token(75);
          break;
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
    jjtn000.setText((" value: "+t.image));
    arr[top++] = t.image;
    VariableType rhs;
        relation_expr();
    System.out.print("\u005ct\u005ct\u005ctRelational expression\u005cn");
    assign();
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return var;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//shift expression
  static final public VariableType shift_expr() throws ParseException, Exception {
 /*@bgen(jjtree) shift_expr */
  SimpleNode jjtn000 = new SimpleNode(JJTSHIFT_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
  VariableType var = null;
    try {
      var = additive_expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 76:
      case 77:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 76:
          t = jj_consume_token(76);
          break;
        case 77:
          t = jj_consume_token(77);
          break;
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
    jjtn000.setText((" value: "+t.image));
    arr[top++] = t.image;
    VariableType rhs;
        rhs = shift_expr();
    if(!symTab.checkCalculateType(var.type, rhs.type))
       errorHandler.error(loc, "Variable " + var.name + " or Variable " + rhs.name + " cannot be used in calculation '>>' and '<<' ");
    System.out.print("\u005ct\u005ct\u005ctShift expression\u005cn");
    assign();
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return var;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//additive expression
  static final public VariableType additive_expr() throws ParseException, Exception {
 /*@bgen(jjtree) additive_expr */
  SimpleNode jjtn000 = new SimpleNode(JJTADDITIVE_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
  boolean pointerFirst;
  VariableType var = null;
    try {
      var = multiplicative_expr();

      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 62:
      case 78:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 78:
          t = jj_consume_token(78);
          break;
        case 62:
          t = jj_consume_token(62);
          break;
        default:
          jj_la1[48] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
   jjtn000.setText((" value: "+t.image));
      arr[top++] = t.image;
      VariableType rhs;
        rhs = additive_expr();
         System.out.print("\u005ct\u005ct\u005ctMultiplicative expression \u005cn");
     /* ptr + num */
     if(var.isPointer)
     {
       if(!rhs.type.equals("int"))
         errorHandler.error(loc, rhs.name + " cannot be calculated with pointer variable " + var.name);
       pr_ir.write("\u005ctt" + i + "=" + arr[top - 1] + "*" + rhs.size + "\u005cn");
       arr[top - 1] = "t" + i++;
       assign();
     }
     /* num + ptr */
     else if(rhs.isPointer)
     {
       if(!var.type.equals("int"))
         errorHandler.error(loc, var.name + " cannot be calculated with pointer variable " + rhs.name);
       pr_ir.write("\u005ctt" + i + "=" + arr[top - 1] + "*" + var.size + "\u005cn");
       arr[top - 3] = "t" + i ++;
       assign();
     }
     else
     {
       assign();
     }
        break;
      default:
        jj_la1[49] = jj_gen;
        ;
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
      {if (true) return var;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof Exception) {
       {if (true) throw (Exception)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public VariableType multiplicative_expr() throws ParseException, Exception {
 /*@bgen(jjtree) multiplicative_expr */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVE_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
  VariableType var = null;
    try {
      var = unary_expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 48:
      case 79:
      case 80:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 48:
          t = jj_consume_token(48);
          break;
        case 79:
          t = jj_consume_token(79);
          break;
        case 80:
          t = jj_consume_token(80);
          break;
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      jjtn000.setText((" value: "+t.image));
      arr[top++] = t.image;
      VariableType rhs;
        rhs = multiplicative_expr();
      if (t.image.equals("%")){
        if(!symTab.checkCalculateType(var.type, rhs.type))
          errorHandler.error(loc, "Variable " + var.name + " or Variable " + rhs.name + " cannot be used in calculation '%' ");
      }
      System.out.print("\u005ct\u005ct\u005ctMultiplicative expression \u005cn");
      assign();
        break;
      default:
        jj_la1[51] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return var;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      if (jjte000 instanceof Exception) {
        {if (true) throw (Exception)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

//常量
  static final public void constant(VariableType var) throws ParseException {
 /*@bgen(jjtree) constant */
    SimpleNode jjtn000 = new SimpleNode(JJTCONSTANT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        t = jj_consume_token(INTEGER_LITERAL);
      jjtn000.setText((" value: "+t.image));
      var.type = "int";
      var.size = 4;
      System.out.print("\u005ct\u005ct\u005ctConstant " + t.image + "\u005cn");
        break;
      case CHARACTER_LITERAL:
        t = jj_consume_token(CHARACTER_LITERAL);
      jjtn000.setText((" value: "+t.image));
      var.type = "char";
      var.size = 1;
      System.out.print("\u005ct\u005ct\u005ctConstant " + t.image + "\u005cn");
        break;
      case FLOATING_POINT_LITERAL:
        t = jj_consume_token(FLOATING_POINT_LITERAL);
      jjtn000.setText((" value: "+t.image));
      var.type = "float";
      var.size = 4;
      System.out.print("\u005ct\u005ct\u005ctConstant " + t.image + "\u005cn");
        break;
      case STRING_LITERAL:
        t = jj_consume_token(STRING_LITERAL);
      jjtn000.setText((" value: "+t.image));
      var.type = "char";
      var.isPointer = true;
      System.out.print("\u005ct\u005ct\u005ctConstant " + t.image + "\u005cn");
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      arr[top++] = t.image;
      var.name = t.image;
      loc = t.beginLine;
      var.isConst = true;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

    // 非终端符号name和<IDENTIFIER>是相同的
// 将Token对象赋给了临时变量tok，并且返回tok中image属性的值作为name()的语义值
  static final public String name() throws ParseException {
 /*@bgen(jjtree) name */
  SimpleNode jjtn000 = new SimpleNode(JJTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
    jjtn000.setText((" name: "+t.image));
    loc = t.beginLine;
    {if (true) return t.image;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_3R_112() {
    if (jj_scan_token(68)) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  static private boolean jj_3R_114() {
    if (jj_scan_token(41)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_106() {
    if (jj_3R_111()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_3R_24()) return true;
    if (jj_3R_25()) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    }
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_80()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_79()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_78()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_77()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_76()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_108() {
    if (jj_3R_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_114()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_107() {
    if (jj_scan_token(67)) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_3R_106()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_81()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_scan_token(41)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_scan_token(66)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_3R_82()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(48)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_64()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(48)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(44)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    if (jj_scan_token(45)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_86() {
    if (jj_scan_token(39)) return true;
    if (jj_3R_108()) return true;
    if (jj_scan_token(43)) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    if (jj_3R_81()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(41)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_118() {
    if (jj_3R_23()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_115() {
    if (jj_scan_token(44)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    if (jj_scan_token(45)) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_113() {
    if (jj_3R_118()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_110() {
    if (jj_3R_67()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_115()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_105() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_67()) return true;
    if (jj_scan_token(39)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    return false;
  }

  static private boolean jj_3R_104() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_109() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) jj_scanpos = xsp;
    if (jj_3R_110()) return true;
    return false;
  }

  static private boolean jj_3R_103() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_3R_108()) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    return false;
  }

  static private boolean jj_3R_102() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_scan_token(61)) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_scan_token(60)) return true;
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_scan_token(40)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_13()) return true;
    if (jj_3R_14()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(39)) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_scan_token(41)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_scan_token(44)) return true;
    if (jj_3R_108()) return true;
    if (jj_scan_token(45)) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_3R_90()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_129() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) return true;
    }
    }
    if (jj_3R_127()) return true;
    return false;
  }

  static private boolean jj_3R_127() {
    if (jj_3R_24()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_65()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_66()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_68()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_69()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_101() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  static private boolean jj_3R_100() {
    if (jj_scan_token(BREAK)) return true;
    return false;
  }

  static private boolean jj_3R_99() {
    if (jj_scan_token(CONTINUE)) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_scan_token(CONST)) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(65)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_98() {
    if (jj_scan_token(GOTO)) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(64)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(48)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_128() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    }
    if (jj_3R_125()) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(63)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_125() {
    if (jj_3R_127()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_128()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(62)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_73()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_14()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_97() {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(61)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_126() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) return true;
    }
    if (jj_3R_123()) return true;
    return false;
  }

  static private boolean jj_3R_123() {
    if (jj_3R_125()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_18()) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(42)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_96() {
    if (jj_scan_token(DO)) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(60)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    if (jj_3R_29()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_124() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) return true;
    }
    }
    }
    if (jj_3R_121()) return true;
    return false;
  }

  static private boolean jj_3R_121() {
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_95() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_scan_token(46)) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_scan_token(59)) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_scan_token(58)) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_scan_token(57)) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(DFLT)) return true;
    if (jj_scan_token(49)) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_scan_token(56)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(15)) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_122() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) return true;
    }
    if (jj_3R_119()) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_scan_token(55)) return true;
    return false;
  }

  static private boolean jj_3R_119() {
    if (jj_3R_121()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(54)) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(53)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(40)) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(52)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(CASE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    }
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_scan_token(51)) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(50)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_120() {
    if (jj_scan_token(63)) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  static private boolean jj_3R_116() {
    if (jj_3R_119()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_67()) return true;
    if (jj_scan_token(49)) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_117() {
    if (jj_scan_token(69)) return true;
    if (jj_3R_111()) return true;
    return false;
  }

  static private boolean jj_3R_111() {
    if (jj_3R_116()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(41)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_scan_token(SWITCH)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_24()) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LoveCTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[53];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x26b8000,0x26b8000,0x0,0x0,0x0,0x6b0000,0x0,0x0,0x8000,0xdc006880,0x26b8000,0x6b0000,0x0,0x0,0x0,0x0,0x0,0xdc006880,0xd0006880,0x50000000,0x2080,0xc000000,0x6880,0x6880,0x6880,0x80000000,0x6880,0x0,0x6880,0x6880,0x6880,0x0,0x0,0x0,0x0,0x0,0x6880,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6880,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x100,0x200,0x100,0x0,0x11000,0x1000,0x0,0xf00144ff,0x0,0x0,0x200,0x100,0x11000,0x1000,0x10000,0xf00144ff,0xf00144ff,0x0,0x0,0x40,0xf00100c0,0xf00100c0,0xf00100c0,0x3,0xf00100c0,0x3c,0xf00100c0,0x40,0x40,0x200,0xffc0100,0xf0010000,0x30001000,0x30001000,0xc0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x40000000,0x10000,0x10000,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x0,0x0,0x0,0x3,0x3,0x3,0x0,0x3,0x0,0x3,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x4,0x8,0x10,0x20,0x0,0xc0,0xc0,0xf00,0xf00,0x3000,0x3000,0x4000,0x4000,0x18000,0x18000,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[17];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public LoveC(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LoveC(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LoveCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public LoveC(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LoveCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public LoveC(LoveCTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(LoveCTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[81];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 53; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 81; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 17; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
